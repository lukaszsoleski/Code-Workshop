https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository

init 

git config --global user.name 'Your Name' 

git config --global user.email 'email@example.com'

git config --list

git add index.html 


git rm --cached index.html removes files from the working tree and from the index


git add *.txt


git init 
git init [repository]
git clone
git status 

git add [file name]
git add .
git add --all

git add -A stages All
git add . stages new and modified, without deleted
git add -u stages modified and deleted, without new

git commit 
git commit -m '[commit message]'
clear

git branch \\ list all branches
git branch [branch name] \\ create branch
git checkout [branch name] \\swap to another branch
git branch [branch name] -d \\delete branch 
git checkout -b [name] \\ create new branch and checkout it

// in dev: 
git merge [branch name] \\ git merge master
// checkout to master
git checkout master
git merge dev // merge dev branch 

2#

git clone [url]
git pull
git branch homepage
git checkout homepage
git add .
git status
git reset
touch .gitignore
git add . 
git commit -m ''
git status
git push -u origin homepage # push local branch to remote repository 


git reset --hard HEAD 

git diff #That command compares what is in your working directory with what is in your staging area
git diff --staged #If you want to see what you’ve staged that will go into your next commit, you can use git diff --staged. 
#This command compares your staged changes to your last commit

git commit -a -m 'added new benchmarks'  #-a flag includes all changed files and skips staging process.


git rm [file name] -remove file

git rm -f [file name] force to remove from staging area

git rm --cashed [file] #This is particularly useful if you forgot to add something to your .gitignore file and accidentally 
                       #staged it, like a large log file or a bunch of .a compiled files. To do this, use the --cached
git rm log/\*.log #This command removes all files that have the .log extension in the log/ directory. 


git mv file_from file_to #rename implicitly

#VIEWING THE COMMIT HISTORY

git log #show history

git log -p or --patch shows the diffrence introduced in each commit. limit the number of log entries displayed using -2 or any number
git log -p -2
git log -stat

#prints commit history: 
git log --pretty=oneline
git log --pretty=short
git log --pretty=full
git log --pretty=fuller
git log --format:"custom formating"
git log --graph #shows branch merging history
git log --since=2.weeks [days , minutes, hours, years]


#UNDOING THINGS

git commit --amend # undo last commit and go back to staging area. 
git reset HEAD [file name] #unstage file
git checkout --[file name] #discard any changes(before staging). WARNING! this is one way process. 
# Any changes made after commit to this file will be gone. Git override this file with content from last commit. 
# another way is to use stashing and branching.
#REMEMBER : anythink that is committed in Git can almost always be recovered. Even commits that were overwritten can be recovered. 


#WORKING WITH REMOTES :







